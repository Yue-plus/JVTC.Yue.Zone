"use strict";(self.webpackChunkjvtc_yue_zone=self.webpackChunkjvtc_yue_zone||[]).push([[5903],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},127:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={},i="\u4f7f\u7528 RaspberryPi Pico W",s={permalink:"/blog/2023/05/12/useRaspberryPiPicoW/README",editUrl:"https://github.com/Yue-plus/JVTC.Yue.Zone/tree/main/blog/2023-05-12-useRaspberryPiPicoW/README.md",source:"@site/blog/2023-05-12-useRaspberryPiPicoW/README.md",title:"\u4f7f\u7528 RaspberryPi Pico W",description:"\u914d\u7f6e PyCharm \u5f00\u53d1\u73af\u5883",date:"2023-05-12T00:00:00.000Z",formattedDate:"2023\u5e745\u670812\u65e5",tags:[],readingTime:1.46,hasTruncateMarker:!1,authors:[],frontMatter:{},nextItem:{title:"diskpart",permalink:"/blog/2023/04/16/diskpart"}},c={authorsImageUrls:[]},p=[{value:"\u914d\u7f6e PyCharm \u5f00\u53d1\u73af\u5883",id:"\u914d\u7f6e-pycharm-\u5f00\u53d1\u73af\u5883",level:2},{value:"\u8fde\u63a5 WiFi",id:"\u8fde\u63a5-wifi",level:2},{value:"HTTP\u3000\u8bf7\u6c42",id:"http\u8bf7\u6c42",level:2}],l={toc:p},u="wrapper";function d(e){let{components:t,...o}=e;return(0,a.kt)(u,(0,r.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"\u914d\u7f6e-pycharm-\u5f00\u53d1\u73af\u5883"},"\u914d\u7f6e PyCharm \u5f00\u53d1\u73af\u5883"),(0,a.kt)("p",null,"\u4e0b\u8f7d\u5b89\u88c5 ",(0,a.kt)("a",{parentName:"p",href:"https://plugins.jetbrains.com/plugin/9777-micropython"},"MicroPython")," \u63d2\u4ef6\u3002\n\u5b89\u88c5\u5b8c\u6210\u540e ",(0,a.kt)("strong",{parentName:"p"},"\u91cd\u542f\u4e00\u4e0b PyCharm"),"\u3002"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"\u8bbe\u7f6e",src:n(3144).Z,width:"916",height:"708"})),(0,a.kt)("p",null,"\u53ef\u80fd\u9700\u8981\u5b89\u88c5\u4ee5\u4e0b\u8f6f\u4ef6\u5305\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"pyserial>=3.5,4.0\ndocopt>=0.6.2,0.7\nadafruit-ampy>=1.0.5,1.1\n")),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(8301).Z,width:"1031",height:"1007"})),(0,a.kt)("h2",{id:"\u8fde\u63a5-wifi"},"\u8fde\u63a5 WiFi"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import time\nimport network\n\nwlan = network.WLAN(network.STA_IF)\nwlan.active(True)\nwlan.connect('TP-LINK_25A3', 'cocacola@1')\n\n# Wait for connect or fail\nmax_wait = 10\nwhile max_wait > 0:\n    if wlan.status() < 0 or wlan.status() >= 3:\n        break\n    max_wait -= 1\n    print('waiting for connection...')\n    time.sleep(1)\n\n# Handle connection error\nif wlan.status() != 3:\n    raise RuntimeError('network connection failed')\nelse:\n    print('connected')\n    status = wlan.ifconfig()\n    print('ip = ' + status[0])\n")),(0,a.kt)("h2",{id:"http\u8bf7\u6c42"},"HTTP\u3000\u8bf7\u6c42"),(0,a.kt)("p",null,"\u53c2\u8003\uff1a",(0,a.kt)("a",{parentName:"p",href:"https://makeblock-micropython-api.readthedocs.io/en/latest/public_library/Third-party-libraries/urequests.html"},(0,a.kt)("inlineCode",{parentName:"a"},"urequests")," \u2014 Network Request Module")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import codey\nimport urequests as requests\nimport ujson\n\n# user_account and password is mblock's account and password\ndef get_user_request_header():\n    post_data = ujson.dumps({ 'account': 'user_account', 'password': 'password'})\n    request_url = 'http://passport2.makeblock.com/v1/user/login'\n    res = requests.post(request_url, headers = {'content-type': 'application/json'}, data = post_data).json()\n    header_data = ''\n    if res['code'] == 0:\n        header_data = { \"content-type\": 'application/json; charset=utf-8', \"devicetype\": '1'}\n        header_data[\"uid\"] = str(res['data']['user']['uid'])\n        header_data[\"deviceid\"] = '30AEA427EC60'\n    return header_data\n\n# Get weather information\n# cid: checkpoint id\n# arg: Information to be queried\n#            aqi:  Air Quality Index\n#            pm25: PM2.5 concentration\n#            pm10: PM10 concentration\n#            co:   Carbon monoxide concentration\n#            so2:  Sulfur dioxide concentration\n#            no2:  Nitrogen dioxide concentration\ndef get_air_quality_info(cid, arg):\n    if not codey.wifi.is_connected():\n        return ''\n    post_data = ujson.dumps({ \"cid\": cid, \"arg\": arg})\n    request_url = 'http://msapi.passport3.makeblock.com/' + 'air/getone'\n    res = requests.post(request_url, headers = get_user_request_header(), data = post_data)\n    text = res.text\n    return float(text)\n\n# Fill in your router's ssid and password here.\ncodey.wifi.start('wifi_ssid', 'password')\ncodey.led.show(0,0,0)\nwhile True:\n    if codey.wifi.is_connected():\n        codey.led.show(0,0,255)\n        data = get_air_quality_info('1539','aqi')  #1539 is Shenzhen checkpoint id\n        codey.display.show(data)\n    else:\n        codey.led.show(0,0,0)\n")))}d.isMDXComponent=!0},8301:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/run-4c881bf2fc25bfa2acea1ea8ecab7cbf.png"},3144:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/setting-66f0730ba57848b2792c1569d7eba08d.png"}}]);